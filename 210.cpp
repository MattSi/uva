/**
模拟n个程序（按照输入顺序编号为1-n）的并行执行。
每个程序包含不超过25条语句。格式一共有5种
1. var = constant （赋值）
2. print var （打印）
3. lock
4. unlock
5. end
变量用单个小写字母表示，初始为0。为所有程序公有（因此，在一个程序内对某个变量赋值，会影响另一个程序）
常数是小于100的非负整数。
每个时刻，只有一个程序处于运行态，其他程序均处于等待态，上述5中语句分别需要t1, t2, t3, t4, t5的单位时间。运行态的程序每次分别运行Q个单位时间（称为配额）。
当一个程序的配额用完之后，把当前语句（如果存在）执行完之后该程序会被插入到一个等待队列中，然后处理器从队首取出一个程序继续执行。
初始等待队列包含按输入、输出排列的各个程序，但由于lock/unlock语句的出现，这个顺序可能会改变。

lock的作用是申请对所有变量的独占访问。lock和unlock总是成对出现，并且不会嵌套。lock总在unlock前面。
当一个程序成功执行完lock指令后，其他程序一旦试图执行lock指令，就会马上被放到一个所谓的阻止队列的尾部（没有用完的配额就浪费了）。
当unlock执行完之后，组织队列的第一个程序进入等待队列的首部。

输入n, t1, t2, t3, t4, t5, Q以及n个程序，按照时间顺序输出所有的print语句的程序编号和结果。
*/







































#include <stdio.h>

int main(int argc, char **argv){


#ifndef ONLINE_JUDGE
	FILE* fp = NULL;
	fp = freopen("./tests/210.in", "r", stdin);
#endif

	return 0;
}
